#!/usr/bin/env python2

import os
FileName  = raw_input("Input File Name: ")

if os.path.isfile('./%s.sv' %FileName) :
  print "\n Error : File already exists..!!"
  raw_input ("\n Press any key to exit....")
  raise SystemExit

else :
  print "\n Creating file %s.sv" %FileName

  file  = open('%s.sv' %FileName, 'at')


  file.write("////////////////////////////////////////////////////////////////////////////////////\n")
  file.write("//                                                                                //\n")
  file.write("//                           MODULE NAME                                          //\n")
  file.write("//                                                                                //\n")
  file.write("//  Author: Deepak J Puthukkaden                                                  //\n")
  file.write("//          deepakjputhukkaden@gmail.com                                          //\n")
  file.write("//          https://github.com/puthukkaden/                                       //\n")
  file.write("//                                                                                //\n")
  file.write("////////////////////////////////////////////////////////////////////////////////////\n")
  file.write("//                              MIT License                                       //\n")
  file.write("//                                                                                //\n")
  file.write("// Copyright (c) 2018 DEEPAK J PUTHUKKADEN                                        //\n")
  file.write("//                    deepakjputhukkaden@gmail.com                                //\n")
  file.write("//                                                                                //\n")
  file.write("// Permission is hereby granted, free of charge, to any person obtaining a copy   //\n")
  file.write("// of this software and associated documentation files (the \"Software\"), to deal  //\n")
  file.write("// in the Software without restriction, including without limitation the rights   //\n")
  file.write("// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      //\n")
  file.write("// copies of the Software, and to permit persons to whom the Software is          //\n")
  file.write("// furnished to do so, subject to the following conditions:                       //\n")
  file.write("//                                                                                //\n")
  file.write("// The above copyright notice and this permission notice shall be included in all //\n")
  file.write("// copies or substantial portions of the Software.                                //\n")
  file.write("//                                                                                //\n")
  file.write("// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     //\n")
  file.write("// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       //\n")
  file.write("// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    //\n")
  file.write("// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         //\n")
  file.write("// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  //\n")
  file.write("// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  //\n")
  file.write("// SOFTWARE.                                                                      //\n")
  file.write("////////////////////////////////////////////////////////////////////////////////////\n")
  file.write("\n")
  file.write("\n")

  file.write("// Module Descrption\n")
  file.write("// ------ ----------\n")
  file.write("//\n")
  file.write("//\n")
  file.write("//\n")
  file.write("\n")
  file.write("\n")

  file.write("module %s\n" %FileName)

  file.write("// ======================\n")
  file.write("// Parameter Declarations\n")
  file.write("// ======================\n")
  file.write("#(\n")
  file.write("  parameter                 param_a = 1'b1      , // parameter a\n")
  file.write("  parameter                 param_b = 8'd1        // parameter b\n")
  file.write(")\n")
  file.write("\n")

  file.write("// =================\n")
  file.write("// Port Declarations\n")
  file.write("// =================\n")
  file.write("  (\n")
  file.write("  // clocks & resets\n")
  file.write("  input   logic    `CLKW    clk                  ,  // clock\n")
  file.write("  input   logic             rst_n                ,  // reset\n")
  file.write("\n")
  file.write("  // input signals\n")
  file.write("  input   logic             input_a              ,  // input a\n")
  file.write("  input   logic   [00:00]   input_b              ,  // input b\n")
  file.write("\n")
  file.write("  // output signals\n")
  file.write("  output  logic             output_a             ,  // output a\n")
  file.write("  output  logic   [00:00]   output_b             ,  // output b\n")
  file.write("  );\n")
  file.write("\n")
  file.write("\n")

  file.write("  // ==================\n")
  file.write("  // Logic Declarations\n")
  file.write("  // ==================\n")
  file.write("  localparam  DIV = 1'b0;\n")
  file.write("  enum logic [1:0]  {\n")
  file.write("    IDLE  = 2'b00  ,\n")
  file.write("    START = 2'b01  ,\n")
  file.write("    BUSY  = 2'b10  ,\n")
  file.write("    DONE  = 2'b10  ,\n")
  file.write("  }     sau_ps  , sau_ns      ; // FSM variables\n")
  file.write("\n")
  file.write("  logic signal  , signal_reg  ; // signal register\n")
  file.write("\n")
  file.write("\n")

  file.write("  // ====================\n")
  file.write("  // Logic Implementation\n")
  file.write("  // ====================\n")
  file.write("\n")
  file.write("  // ------------------------\n")
  file.write("  // Output Signal Comb Logic\n")
  file.write("  // ------------------------\n")
  file.write("  always_comb begin\n")
  file.write("    if (input_a) begin //when input_a is high\n")
  file.write("        signal = 1'b1;\n")
  file.write("    end // if (input_a)\n")
  file.write("\n")
  file.write("    else if (input_b) begin //when input_b is high\n")
  file.write("      signal = 1'b0;\n")
  file.write("    end // else if (input_b)\n")
  file.write("\n")
  file.write("    else begin  //when input_a and input_b are low\n")
  file.write("      signal = signal_reg\n")
  file.write("    end // else\n")
  file.write("  end // always_comb\n")
  file.write("\n")
  file.write("\n")
  file.write("  // ----------------\n")
  file.write("  // Sequential Logic\n")
  file.write("  // ----------------\n")
  file.write("  always_ff @(posedge `CLK(clk), negedge rst_b) begin\n")
  file.write("    if (!rst_b) begin\n")
  file.write("      signal_reg <= 1'b0;\n")
  file.write("    end // if (!rst_b)\n")
  file.write("\n")
  file.write("    else if posedge(clk) begin\n")
  file.write("      signal_reg <= signal;\n")
  file.write("    end // else if posedge(clk)\n")
  file.write("  end // always_ff @(posedge `CLK(clk), negedge rst_b)\n")
  file.write("\n")
  file.write("\n")
  file.write("  // =================\n")
  file.write("  // Output Assignment\n")
  file.write("  // =================\n")
  file.write("  assign output_a       = signal;\n")
  file.write("  assign output_b[0:0]  = signal_reg;\n")
  file.write("\n")
  file.write("endmodule //%s\n" %FileName)

  file.close()

  print "\n File %s.sv, successfully created" %FileName
  raw_input ("\n Press any key to exit....")

raise SystemExit